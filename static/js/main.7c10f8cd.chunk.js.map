{"version":3,"sources":["logic/sudoku/types.ts","config/config.ts","logic/logger.ts","logic/sudoku/utils.ts","logic/sudoku/useSudoku.tsx","components/buttons/Button/Button.tsx","components/inputs/TextInput/TextInput.tsx","components/board/actions/SudokuInput/SudokuInput.tsx","components/board/actions/SudokuResult/SudokuResult.tsx","components/board/actions/Actions.tsx","components/pickers/DigitPicker/DigitPicker.tsx","components/board/SudokuDigit/SudokuDigit.tsx","components/board/SudokuDigit/SudokuDigitNonEditable.tsx","components/board/SudokuSquare/SudokuSquare.tsx","components/board/Sudoku/Sudoku.tsx","App.tsx","index.tsx"],"names":["SudokuValidationResult","config","Logger","console","log","info","warn","error","shiftRowBySquare","row","f","s","t","rest","shiftRowByColumn","collidesIn","sudokuValue","arr","value","filter","el","length","getSquareBySquareIdx","board","squareRowIdx","squareColIdx","slice","map","generateRows","firstRow","shuffle","range","secondRow","thirdRow","fourthRow","fifthRow","sixthRow","seventhRow","eighthRow","ninthRow","flatten","isEditable","generateSudoku","rows","val","i","rowIdx","random","colIdx","hideValues","validateSudoku","validatedBoard","digitRow","digitRowIdx","digitValue","digitValueIdx","hasError","column","idx","getColumn","square","digitColIdx","Math","floor","getSquare","hasRowCollision","hasColumnCollision","hasSquareCollision","anyHasError","find","result","Incorrect","Correct","SudokuContext","React","createContext","undefined","SudokuProvider","children","sudoku","useState","setBoard","setResult","updateSquare","digitR","digitRIdx","digitIdx","reset","validate","validation","useSudokuBoard","Provider","useSudoku","useContext","Error","Button","variant","className","classNames","TextInput","onChange","e","target","placeholder","SudokuInput","isInteracting","setIsInteracting","setValue","onClick","json","JSON","parse","replace","Array","parseJsonStringToBoard","Icon","SudokuResult","Actions","DigitPicker","onPicked","renderDigit","digit","SudokuDigit","position","onDigitPicked","isPicking","setIsPicking","handlePicked","type","onBlur","onFocus","Grow","in","timeout","SudokuDigitNonEditable","SudokuSquare","sudokuValues","v","Sudoku","renderSquare","rIdx","cIdx","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mVAMYA,E,oFCNCC,EACW,G,gBCEXC,EAAb,wFACE,WAAmC,IAAD,GAChC,EAAAC,SAAQC,IAAR,qBAFJ,kBAKE,WAAoC,IAAD,GACjC,EAAAD,SAAQE,KAAR,qBANJ,kBASE,WAAoC,IAAD,GACjC,EAAAF,SAAQG,KAAR,qBAVJ,mBAaE,WAAqC,IAAD,GAClC,EAAAH,SAAQI,MAAR,uBAdJ,M,SFGYP,K,sBAAAA,E,mBAAAA,M,KGIZ,IAAMQ,EAAmB,SAACC,GACxB,kBAA2BA,GAApBC,EAAP,KAAUC,EAAV,KAAaC,EAAb,KAAmBC,EAAnB,WACA,MAAM,GAAN,mBAAWA,GAAX,CAAiBH,EAAGC,EAAGC,KAEnBE,EAAmB,SAACL,GACxB,kBAAqBA,GAAdC,EAAP,KAAaG,EAAb,WACA,MAAM,GAAN,mBAAWA,GAAX,CAAiBH,KAEbK,EAAa,SACjBC,EACAC,GAEA,OAAKD,EAAYE,OAIoD,IAA9DD,EAAIE,QAAO,SAACC,GAAD,OAAQA,EAAGF,QAAUF,EAAYE,SAAOG,QAK/CC,EAAuB,SAClCC,EACAC,EACAC,GAGA,OADaF,EAAMG,MAAqB,EAAfF,EAAiC,EAAfA,EAAmB,GAClDG,KAAI,SAAClB,GAAD,OAASA,EAAIiB,MAAqB,EAAfD,EAAiC,EAAfA,EAAmB,OAqE7DG,EAAe,WAC1B,IAAMC,EAAWC,kBAAQC,gBAAM,EAAG,KAC5BC,EAAYxB,EAAiBqB,GAC7BI,EAAWzB,EAAiBwB,GAE5BE,EAAYpB,EAAiBmB,GAC7BE,EAAW3B,EAAiB0B,GAC5BE,EAAW5B,EAAiB2B,GAE5BE,EAAavB,EAAiBsB,GAC9BE,EAAY9B,EAAiB6B,GAC7BE,EAAW/B,EAAiB8B,GAElC,OAAOE,kBACLV,kBAAQ,CACN,CAACD,EAAUG,EAAWC,GACtB,CAACC,EAAWC,EAAUC,GACtB,CAACC,EAAYC,EAAWC,MAE1BZ,KAAI,SAAClB,GAAD,OAASA,EAAIkB,KAAI,SAACT,GAAD,MAAY,CAAEA,QAAOuB,YAAY,UAO7CC,EAAiB,WAG5B,OA3CiB,SAACC,GAIlB,IAHA,IAAMzB,EAAQyB,EAAKhB,KAAI,SAAClB,GAAD,mBAClBA,EAAIkB,KAAI,SAACiB,GAAD,MAAU,CAAE1B,MAAO0B,EAAI1B,MAAOuB,YAAY,UAE9CI,EAAI,EAAGA,EAAI5C,EAA6B4C,GAAK,EAAG,CACvD,IAAMC,EAASC,iBAAO,EAAG,GACnBC,EAASD,iBAAO,EAAG,GAEzB7B,EAAM4B,GAAQE,GAAU,CAAE9B,MAAO,KAAMuB,YAAY,GAGrD,OAAOvB,EAgCA+B,CAFMrB,MAKFsB,EAAiB,SAAC3B,GAC7B,IAAM4B,EAAiB5B,EAAMI,KAAI,SAACyB,EAAUC,GAC1C,OAAOD,EAASzB,KAAI,SAAC2B,EAAYC,GAC/B,IAAKD,EAAWb,WACd,OAAOa,EAET,IAAKA,EAAWpC,MACd,OAAO,2BAAKoC,GAAZ,IAAwBE,UAAU,IAEpC,IAAMC,EAvHM,SAAClC,EAAoBmC,GACrC,OAAOnC,EAAMI,KAAI,SAAClB,GAAD,OAASA,EAAIiD,MAsHXC,CAAUpC,EAAOgC,GAC1BK,EAASpB,kBA5GI,SACvBjB,EACA8B,EACAQ,GAEA,IAAMrC,EAAesC,KAAKC,MAAMV,EAAc,GACxC5B,EAAeqC,KAAKC,MAAMF,EAAc,GAE9C,OAAOvC,EAAqBC,EAAOC,EAAcC,GAoGtBuC,CAAUzC,EAAO8B,EAAaE,IAE/CU,EAAkBlD,EAAWuC,EAAYF,GACzCc,EAAqBnD,EAAWuC,EAAYG,GAC5CU,EAAqBpD,EAAWuC,EAAYM,GAElD,OAAO,2BACFN,GADL,IAEEE,SAAUW,GAAsBF,GAAmBC,UAKnDE,EAAcjB,EAAekB,MAAK,SAAC5D,GAAD,OACtCA,EAAI4D,MAAK,SAACjD,GAAD,OAAQA,EAAGoC,eAGtB,MAAO,CACLjC,MAAO4B,EACPmB,OAAQF,EACJpE,EAAuBuE,UACvBvE,EAAuBwE,U,OCjHzBC,EAAgBC,IAAMC,mBAAsCC,GACrDC,EAAiB,SAAC,GAEU,IADvCC,EACsC,EADtCA,SAEMC,EAnDe,WACrB,MAA0BC,mBAAsBtC,KAAhD,mBAAOnB,EAAP,KAAc0D,EAAd,KACA,EAA4BD,qBAA5B,mBAAOV,EAAP,KAAeY,EAAf,KAmCA,MAAO,CACL3D,QACA0D,WACAE,aApCmB,SACnB9B,EACAQ,EACA3C,GAEA+D,EACE1D,EAAMI,KAAI,SAACyD,EAAQC,GACjB,OAAIA,IAAchC,EACT+B,EAGFA,EAAOzD,KAAI,SAAC2B,EAAYgC,GAC7B,OAAIA,IAAazB,EACRP,EAGF,2BAAKA,GAAZ,IAAwBpC,kBAqB9BqE,MAfY,WACZN,EAASvC,KACTwC,OAAUN,IAcVY,SAXe,WACf,IAAMC,EAAavC,EAAe3B,GAClC0D,EAASQ,EAAWlE,OACpB2D,EAAUO,EAAWnB,SASrBA,UAQaoB,GAEf,OACE,cAACjB,EAAckB,SAAf,CAAwBzE,MAAO6D,EAA/B,SAAwCD,KAI/Bc,EAAY,WACvB,IAAMb,EAASL,IAAMmB,WAAWpB,GAEhC,IAAKM,EACH,MAAM,IAAIe,MAAM,gDAGlB,OAAOf,G,wBCnEIgB,G,MAAS,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,QAASlB,EAA+B,EAA/BA,SAAajE,EAAkB,sCAC/D,OACE,6CAAKoF,UAAWC,IAAW,SAAUF,IAAcnF,GAAnD,aACGiE,O,gBCHMqB,G,MAAY,SAAC,GAAgC,IAA9BjF,EAA6B,EAA7BA,MAAOkF,EAAsB,EAAtBA,SACjC,OACE,uBACEH,UAAU,aACVG,SAAQ,+GAAE,SAACC,GAAD,OAAOD,EAASC,EAAEC,OAAOpF,UACnCA,MAAOA,EACPqF,YAAW,oCCJJC,G,MAAc,WACzB,IAAQvB,EAAaW,IAAbX,SACR,EAA0CD,oBAAS,GAAnD,mBAAOyB,EAAP,KAAsBC,EAAtB,KACA,EAA0B1B,mBAAS,IAAnC,mBAAO9D,EAAP,KAAcyF,EAAd,KAcA,OACE,sBAAKV,UAAU,eAAf,UACE,cAAC,EAAD,CACED,QAAQ,kBACRY,QAAS,kBAAMF,GAAkBD,IAFnC,iCAMA,sBACER,UAAWC,IAAW,oBAAqB,CACzC,2BAA4BO,IAFhC,UAKE,cAAC,EAAD,CAAWvF,MAAOA,EAAOkF,SAAUO,IACnC,mBAAGC,QArBY,WACnB,IAAMrF,EJ8B4B,SACpCsF,GAEA,IACE,IAAM5F,EAAM6F,KAAKC,MAAMF,EAAKG,QAAQ,SAAU,KAC9C,OAAM/F,aAAegG,OAAYhG,EAAI,aAAcgG,MAMhC,IAAfhG,EAAII,QAAkBJ,EAAIoD,MAAK,SAAC5D,GAAD,OAAwB,IAAfA,EAAIY,eAC9CnB,EAAOI,KAAK,+CAAgDW,EAAK4F,GAMjE5F,EAAIoD,MAAK,SAAC5D,GAAD,OACPA,EAAI4D,MAAK,SAACjD,GACR,OAAOA,GAAoB,kBAAPA,aAIxBlB,EAAOI,KAAK,oCAAqCW,EAAK4F,GAKjD5F,EAAIU,KAAI,SAAClB,GAAD,OACbA,EAAIkB,KAAI,SAACP,GAAD,MAAS,CACfF,MAAOE,EACPqB,YAAarB,cA1BflB,EAAOI,KAAK,wCAAyCW,EAAK4F,GA6B5D,MAAOR,GAGP,YAFAnG,EAAOI,KAAK,uCAAwC+F,EAAGQ,IIlEzCK,CAAuBhG,GACjCK,GACF0D,EAAS1D,IAkBP,SACE,cAAC4F,EAAA,EAAD,qBAEF,mBAAGP,QA7BK,WACZD,EAAS,IACTD,GAAiB,IA2Bb,SACE,cAACS,EAAA,EAAD,8BCpCGC,G,MAAe,SAAC,GAAuB,IAArB9C,EAAoB,EAApBA,OAO7B,OACE,qBACE2B,UAAWC,IAAW,gBAAiB,CACrC,6BAAoCtB,IAAXN,EACzB,uBAAwBA,IAAWtE,EAAuBuE,UAC1D,wBAAyBD,IAAWtE,EAAuBwE,UAJ/D,SAOGF,IAbIA,IAAWtE,EAAuBwE,QACrC,qCACA,2CCLK6C,EAAU,WACrB,MAAoCzB,IAA5BL,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUlB,EAAzB,EAAyBA,OACzB,OACE,sBAAK2B,UAAU,UAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,kBAAf,UACE,cAAC,EAAD,CAAQD,QAAQ,gBAAgBY,QAASrB,EAAzC,sBAGA,cAAC,EAAD,CAAQS,QAAQ,kBAAkBY,QAASpB,EAA3C,+BAIF,cAAC,EAAD,CAAclB,OAAQA,Q,QCdfgD,G,MAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SACtBC,EAAc,SAACC,GAInB,OACE,qBAAKxB,UAAU,mBAAmBW,QAJf,WACnBW,EAASE,IAGT,SACGA,KAKP,OACE,sBAAKxB,UAAU,eAAf,UACE,sBAAKA,UAAU,mBAAf,UACGuB,EAAY,GACZA,EAAY,GACZA,EAAY,MAEf,sBAAKvB,UAAU,mBAAf,UACGuB,EAAY,GACZA,EAAY,GACZA,EAAY,MAEf,sBAAKvB,UAAU,mBAAf,UACGuB,EAAY,GACZA,EAAY,GACZA,EAAY,MAEf,qBAAKvB,UAAU,yBAAyBW,QAAS,kBAAMW,EAAS,OAAhE,wBCtBOG,G,MAAc,SAAC,GAA+C,IAA7CD,EAA4C,EAA5CA,MAAOE,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,cAC7C,EAAkC5C,qBAAlC,mBAAO6C,EAAP,KAAkBC,EAAlB,KACMC,EAAe,SAAC7G,GACpB4G,OAAalD,GACbgD,EAAc1G,IAgBhB,OACE,yBACE8G,KAAK,SACLC,OAAQ,kBAAMH,GAAa,IAC3BI,QAAS,kBAAMJ,GAAa,IAC5BlB,aAAuBhC,IAAdiD,EAA0B,kBAAMC,GAAa,SAAQlD,EAC9DqB,UAAWC,IAAW,eAAgB,wBAAyByB,EAAU,CACvE,qBAAsBF,EAAMjE,WANhC,UASGqE,GAtBD,cAACM,EAAA,EAAD,CAAMC,IAAE,EAACC,QAAS,IAAlB,SACE,qBAAKpC,UAAU,sBAAf,SACE,cAAC,EAAD,CAAasB,SAAUQ,QAOtB,4BAAIN,EAAMvG,aCnBRoH,EAAyB,SAAC,GAAgC,IAA9Bb,EAA6B,EAA7BA,MAAOE,EAAsB,EAAtBA,SAK9C,OACE,wBAAQK,KAAK,SAAS/B,UAAWC,IAAW,eAAgByB,GAA5D,SAJO,4BAAIF,EAAMvG,WCGRqH,G,MAAe,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,aAAcZ,EAA2B,EAA3BA,cACrCJ,EAAc,SAClB1E,EACAE,EACA2E,GAEA,IAAMzG,EAAQsH,EAAa1F,GAAQE,GACnC,OAAK9B,EAAMuB,WAIT,cAAC,EAAD,CACEgF,MAAOe,EAAa1F,GAAQE,GAC5B2E,SAAUA,EACVC,cAAa,+GAAE,SAACa,GAAD,OAAOb,EAAc9E,EAAQE,EAAQyF,QAN/C,cAAC,EAAD,CAAwBhB,MAAOvG,EAAOyG,SAAUA,KAU3D,OACE,sBAAK1B,UAAU,gBAAf,UACE,sBAAKA,UAAU,oBAAf,UACGuB,EAAY,EAAG,EAAG,YAClBA,EAAY,EAAG,EAAG,cAClBA,EAAY,EAAG,EAAG,gBAErB,sBAAKvB,UAAU,oBAAf,UACGuB,EAAY,EAAG,EAAG,eAClBA,EAAY,EAAG,EAAG,iBAClBA,EAAY,EAAG,EAAG,mBAErB,sBAAKvB,UAAU,oBAAf,UACGuB,EAAY,EAAG,EAAG,eAClBA,EAAY,EAAG,EAAG,iBAClBA,EAAY,EAAG,EAAG,wBC3CdkB,G,MAAS,WACpB,MAAgC9C,IAAxBrE,EAAR,EAAQA,MAAO4D,EAAf,EAAeA,aAETwD,EAAe,SAAC7F,EAAgBE,GACpC,IAAMY,EAAStC,EAAqBC,EAAOuB,EAAQE,GACnD,OACE,cAAC,EAAD,CACEwF,aAAc5E,EACdgE,cAAe,SAACgB,EAAMC,EAAM3H,GAAb,OACbiE,EAAsB,EAATrC,EAAa8F,EAAe,EAAT5F,EAAa6F,EAAM3H,OAK3D,OACE,sBAAK+E,UAAU,SAAf,UACE,sBAAKA,UAAU,aAAf,UACG0C,EAAa,EAAG,GAChBA,EAAa,EAAG,GAChBA,EAAa,EAAG,MAEnB,sBAAK1C,UAAU,aAAf,UACG0C,EAAa,EAAG,GAChBA,EAAa,EAAG,GAChBA,EAAa,EAAG,MAEnB,sBAAK1C,UAAU,aAAf,UACG0C,EAAa,EAAG,GAChBA,EAAa,EAAG,GAChBA,EAAa,EAAG,WClBVG,MAXf,WACE,OACE,qBAAK7C,UAAU,YAAf,SACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,UCNR8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7c10f8cd.chunk.js","sourcesContent":["export type SudokuBoardValue = {\n  value: number | null;\n  hasError?: boolean;\n  isEditable: boolean;\n};\nexport type SudokuBoard = SudokuBoardValue[][];\nexport enum SudokuValidationResult {\n  Incorrect = \"Incorrect\",\n  Correct = \"Correct\",\n}\n\nexport interface ValidationResult {\n  board: SudokuBoard;\n  result: SudokuValidationResult;\n}\n\nexport interface SudokuHook {\n  board: SudokuBoard;\n  setBoard(board: SudokuBoard): void;\n  result?: SudokuValidationResult;\n  updateSquare(\n    digitRowIdx: number,\n    digitColIdx: number,\n    value: SudokuBoardValue[\"value\"]\n  ): void;\n  reset(): void;\n  validate(): void;\n}\n","export const config = {\n  sudokuHideRowsNumber: 50,\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-console */\n\nexport class Logger {\n  static log(...value: any[]): void {\n    console.log(...value);\n  }\n\n  static info(...value: any[]): void {\n    console.info(...value);\n  }\n\n  static warn(...value: any[]): void {\n    console.warn(...value);\n  }\n\n  static error(...value: any[]): void {\n    console.error(...value);\n  }\n}\n","import { flatten, random, range, shuffle } from \"lodash\";\nimport { config } from \"../../config/config\";\nimport { Logger } from \"../logger\";\nimport {\n  SudokuBoard,\n  SudokuBoardValue,\n  SudokuValidationResult,\n  ValidationResult,\n} from \"./types\";\n\nconst shiftRowBySquare = (row: number[]): number[] => {\n  const [f, s, t, ...rest] = row;\n  return [...rest, f, s, t];\n};\nconst shiftRowByColumn = (row: number[]): number[] => {\n  const [f, ...rest] = row;\n  return [...rest, f];\n};\nconst collidesIn = (\n  sudokuValue: SudokuBoardValue,\n  arr: SudokuBoardValue[]\n): boolean => {\n  if (!sudokuValue.value) {\n    return true;\n  }\n\n  return arr.filter((el) => el.value === sudokuValue.value).length !== 1;\n};\nconst getColumn = (board: SudokuBoard, idx: number): SudokuBoardValue[] => {\n  return board.map((row) => row[idx]);\n};\nexport const getSquareBySquareIdx = (\n  board: SudokuBoard,\n  squareRowIdx: number,\n  squareColIdx: number\n): SudokuBoardValue[][] => {\n  const rows = board.slice(squareRowIdx * 3, squareRowIdx * 3 + 3);\n  return rows.map((row) => row.slice(squareColIdx * 3, squareColIdx * 3 + 3));\n};\n\nexport const getSquare = (\n  board: SudokuBoard,\n  digitRowIdx: number,\n  digitColIdx: number\n): SudokuBoardValue[][] => {\n  const squareRowIdx = Math.floor(digitRowIdx / 3);\n  const squareColIdx = Math.floor(digitColIdx / 3);\n\n  return getSquareBySquareIdx(board, squareRowIdx, squareColIdx);\n};\nexport const parseJsonStringToBoard = (\n  json: string\n): SudokuBoard | undefined => {\n  try {\n    const arr = JSON.parse(json.replace(/[\\s\"]/g, \"\")) as (number | null)[][];\n    if (!(arr instanceof Array) || !(arr[0] instanceof Array)) {\n      Logger.warn(\"Received input is not a correct array\", arr, json);\n\n      return undefined;\n    }\n\n    if (arr.length !== 9 || !!arr.find((row) => row.length !== 9)) {\n      Logger.warn(\"Received input array is not of correct shape\", arr, json);\n\n      return undefined;\n    }\n\n    if (\n      arr.find((row) =>\n        row.find((el) => {\n          return el && typeof el !== \"number\";\n        })\n      )\n    ) {\n      Logger.warn(\"Received input has illegal values\", arr, json);\n\n      return undefined;\n    }\n\n    return arr.map((row) =>\n      row.map((el) => ({\n        value: el,\n        isEditable: !el,\n      }))\n    );\n  } catch (e) {\n    Logger.warn(\"Couldn't parse input to sudoku board\", e, json);\n\n    return undefined;\n  }\n};\n\nconst hideValues = (rows: SudokuBoardValue[][]): SudokuBoardValue[][] => {\n  const value = rows.map((row) => [\n    ...row.map((val) => ({ value: val.value, isEditable: false })),\n  ]);\n  for (let i = 0; i < config.sudokuHideRowsNumber; i += 1) {\n    const rowIdx = random(0, 8);\n    const colIdx = random(0, 8);\n\n    value[rowIdx][colIdx] = { value: null, isEditable: true };\n  }\n\n  return value;\n};\n\nexport const generateRows = (): SudokuBoardValue[][] => {\n  const firstRow = shuffle(range(1, 10));\n  const secondRow = shiftRowBySquare(firstRow);\n  const thirdRow = shiftRowBySquare(secondRow);\n\n  const fourthRow = shiftRowByColumn(thirdRow);\n  const fifthRow = shiftRowBySquare(fourthRow);\n  const sixthRow = shiftRowBySquare(fifthRow);\n\n  const seventhRow = shiftRowByColumn(sixthRow);\n  const eighthRow = shiftRowBySquare(seventhRow);\n  const ninthRow = shiftRowBySquare(eighthRow);\n\n  return flatten(\n    shuffle([\n      [firstRow, secondRow, thirdRow],\n      [fourthRow, fifthRow, sixthRow],\n      [seventhRow, eighthRow, ninthRow],\n    ])\n  ).map((row) => row.map((value) => ({ value, isEditable: true })));\n};\n\nexport const generateSudokuSolved = (): SudokuBoard => {\n  return generateRows();\n};\n\nexport const generateSudoku = (): SudokuBoard => {\n  const rows = generateRows();\n\n  return hideValues(rows);\n};\n\nexport const validateSudoku = (board: SudokuBoard): ValidationResult => {\n  const validatedBoard = board.map((digitRow, digitRowIdx) => {\n    return digitRow.map((digitValue, digitValueIdx) => {\n      if (!digitValue.isEditable) {\n        return digitValue;\n      }\n      if (!digitValue.value) {\n        return { ...digitValue, hasError: true };\n      }\n      const column = getColumn(board, digitValueIdx);\n      const square = flatten(getSquare(board, digitRowIdx, digitValueIdx));\n\n      const hasRowCollision = collidesIn(digitValue, digitRow);\n      const hasColumnCollision = collidesIn(digitValue, column);\n      const hasSquareCollision = collidesIn(digitValue, square);\n\n      return {\n        ...digitValue,\n        hasError: hasSquareCollision || hasRowCollision || hasColumnCollision,\n      };\n    });\n  });\n\n  const anyHasError = validatedBoard.find((row) =>\n    row.find((el) => el.hasError)\n  );\n\n  return {\n    board: validatedBoard,\n    result: anyHasError\n      ? SudokuValidationResult.Incorrect\n      : SudokuValidationResult.Correct,\n  };\n};\n","import React, { useState } from \"react\";\nimport {\n  SudokuBoard,\n  SudokuBoardValue,\n  SudokuHook,\n  SudokuValidationResult,\n} from \"./types\";\nimport { generateSudoku, validateSudoku } from \"./utils\";\n\nconst useSudokuBoard = (): SudokuHook => {\n  const [board, setBoard] = useState<SudokuBoard>(generateSudoku());\n  const [result, setResult] = useState<SudokuValidationResult>();\n\n  const updateSquare = (\n    digitRowIdx: number,\n    digitColIdx: number,\n    value: SudokuBoardValue[\"value\"]\n  ) => {\n    setBoard(\n      board.map((digitR, digitRIdx) => {\n        if (digitRIdx !== digitRowIdx) {\n          return digitR;\n        }\n\n        return digitR.map((digitValue, digitIdx) => {\n          if (digitIdx !== digitColIdx) {\n            return digitValue;\n          }\n\n          return { ...digitValue, value };\n        });\n      })\n    );\n  };\n\n  const reset = () => {\n    setBoard(generateSudoku());\n    setResult(undefined);\n  };\n\n  const validate = () => {\n    const validation = validateSudoku(board);\n    setBoard(validation.board);\n    setResult(validation.result);\n  };\n\n  return {\n    board,\n    setBoard,\n    updateSquare,\n    reset,\n    validate,\n    result,\n  };\n};\n\nconst SudokuContext = React.createContext<SudokuHook | undefined>(undefined);\nexport const SudokuProvider = ({\n  children,\n}: React.PropsWithChildren<unknown>) => {\n  const sudoku = useSudokuBoard();\n\n  return (\n    <SudokuContext.Provider value={sudoku}>{children}</SudokuContext.Provider>\n  );\n};\n\nexport const useSudoku = (): SudokuHook => {\n  const sudoku = React.useContext(SudokuContext);\n\n  if (!sudoku) {\n    throw new Error(\"useSudoku must be used within SudokuProvider\");\n  }\n\n  return sudoku;\n};\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport \"./Button.scss\";\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  variant: Variant;\n}\nexport const Button = ({ variant, children, ...rest }: Props) => {\n  return (\n    <div className={classNames(\"button\", variant)} {...rest}>\n      {children}\n    </div>\n  );\n};\n\ntype Variant = \"button-normal\" | \"button-outlined\";\n","import React from \"react\";\nimport \"./TextInput.scss\";\n\ninterface Props {\n  onChange(value: string): void;\n  value: string;\n}\nexport const TextInput = ({ value, onChange }: Props) => {\n  return (\n    <input\n      className=\"text-input\"\n      onChange={(e) => onChange(e.target.value)}\n      value={value}\n      placeholder={`\"[[1,2,3,..9],[2,3,...],...]\"`}\n    />\n  );\n};\n","import { Icon } from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React, { useState } from \"react\";\nimport { useSudoku } from \"../../../../logic/sudoku/useSudoku\";\nimport { parseJsonStringToBoard } from \"../../../../logic/sudoku/utils\";\nimport { Button } from \"../../../buttons/Button/Button\";\nimport { TextInput } from \"../../../inputs/TextInput/TextInput\";\nimport \"./SudokuInput.scss\";\n\nexport const SudokuInput = () => {\n  const { setBoard } = useSudoku();\n  const [isInteracting, setIsInteracting] = useState(false);\n  const [value, setValue] = useState(\"\");\n\n  const reset = () => {\n    setValue(\"\");\n    setIsInteracting(false);\n  };\n\n  const handleSubmit = () => {\n    const board = parseJsonStringToBoard(value);\n    if (board) {\n      setBoard(board);\n    }\n  };\n\n  return (\n    <div className=\"sudoku-input\">\n      <Button\n        variant=\"button-outlined\"\n        onClick={() => setIsInteracting(!isInteracting)}\n      >\n        Start a custom game\n      </Button>\n      <div\n        className={classNames(\"sudoku-input-area\", {\n          \"sudoku-input-area-active\": isInteracting,\n        })}\n      >\n        <TextInput value={value} onChange={setValue} />\n        <i onClick={handleSubmit}>\n          <Icon>done</Icon>\n        </i>\n        <i onClick={reset}>\n          <Icon>close</Icon>\n        </i>\n      </div>\n    </div>\n  );\n};\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport { SudokuValidationResult } from \"../../../../logic/sudoku/types\";\nimport \"./SudokuResult.scss\";\n\ninterface Props {\n  result?: SudokuValidationResult;\n}\nexport const SudokuResult = ({ result }: Props) => {\n  const renderText = (): string => {\n    return result === SudokuValidationResult.Correct\n      ? \"Leapin' lizards! Sudoku is correct\"\n      : \"Son of a biscuit, something's wrong\";\n  };\n\n  return (\n    <div\n      className={classNames(\"sudoku-result\", {\n        \"sudoku-result-showing\": result !== undefined,\n        \"sudoku-result-danger\": result === SudokuValidationResult.Incorrect,\n        \"sudoku-result-success\": result === SudokuValidationResult.Correct,\n      })}\n    >\n      {result && renderText()}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSudoku } from \"../../../logic/sudoku/useSudoku\";\nimport { Button } from \"../../buttons/Button/Button\";\nimport \"./Actions.scss\";\nimport { SudokuInput } from \"./SudokuInput/SudokuInput\";\nimport { SudokuResult } from \"./SudokuResult/SudokuResult\";\n\nexport const Actions = () => {\n  const { reset, validate, result } = useSudoku();\n  return (\n    <div className=\"actions\">\n      <SudokuInput />\n      <div className=\"actions-buttons\">\n        <Button variant=\"button-normal\" onClick={reset}>\n          New game\n        </Button>\n        <Button variant=\"button-outlined\" onClick={validate}>\n          Check solution\n        </Button>\n      </div>\n      <SudokuResult result={result} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./DigitPicker.scss\";\n\ninterface Props {\n  onPicked(digit: number | null): void;\n}\nexport const DigitPicker = ({ onPicked }: Props) => {\n  const renderDigit = (digit: number) => {\n    const handlePicked = () => {\n      onPicked(digit);\n    };\n    return (\n      <div className=\"digit-picker-btn\" onClick={handlePicked}>\n        {digit}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"digit-picker\">\n      <div className=\"digit-picker-row\">\n        {renderDigit(1)}\n        {renderDigit(2)}\n        {renderDigit(3)}\n      </div>\n      <div className=\"digit-picker-row\">\n        {renderDigit(4)}\n        {renderDigit(5)}\n        {renderDigit(6)}\n      </div>\n      <div className=\"digit-picker-row\">\n        {renderDigit(7)}\n        {renderDigit(8)}\n        {renderDigit(9)}\n      </div>\n      <div className=\"digit-picker-clear-btn\" onClick={() => onPicked(null)}>\n        Clear\n      </div>\n    </div>\n  );\n};\n","import { Grow } from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React, { useState } from \"react\";\nimport { SudokuBoardValue } from \"../../../logic/sudoku/types\";\nimport { DigitPicker } from \"../../pickers/DigitPicker/DigitPicker\";\nimport \"./SudokuDigit.scss\";\n\ninterface Props {\n  digit: SudokuBoardValue;\n  position: Position;\n  onDigitPicked(value: SudokuBoardValue[\"value\"]): void;\n}\n\nexport const SudokuDigit = ({ digit, position, onDigitPicked }: Props) => {\n  const [isPicking, setIsPicking] = useState<boolean>();\n  const handlePicked = (value: number | null) => {\n    setIsPicking(undefined);\n    onDigitPicked(value);\n  };\n  const renderPicker = () => {\n    return (\n      <Grow in timeout={250}>\n        <div className=\"sudoku-digit-picker\">\n          <DigitPicker onPicked={handlePicked} />\n        </div>\n      </Grow>\n    );\n  };\n\n  const renderDigit = () => {\n    return <p>{digit.value}</p>;\n  };\n\n  return (\n    <button\n      type=\"button\"\n      onBlur={() => setIsPicking(false)}\n      onFocus={() => setIsPicking(true)}\n      onClick={isPicking === undefined ? () => setIsPicking(true) : undefined}\n      className={classNames(\"sudoku-digit\", \"sudoku-digit-editable\", position, {\n        \"sudoku-digit-error\": digit.hasError,\n      })}\n    >\n      {isPicking && renderPicker()}\n      {renderDigit()}\n    </button>\n  );\n};\n\nexport type Position =\n  | \"top-left\"\n  | \"top-middle\"\n  | \"top-right\"\n  | \"center-left\"\n  | \"center-middle\"\n  | \"center-right\"\n  | \"bottom-left\"\n  | \"bottom-middle\"\n  | \"bottom-right\";\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport { SudokuBoardValue } from \"../../../logic/sudoku/types\";\nimport { Position } from \"./SudokuDigit\";\nimport \"./SudokuDigit.scss\";\n\ninterface Props {\n  digit: SudokuBoardValue;\n  position: Position;\n}\n\nexport const SudokuDigitNonEditable = ({ digit, position }: Props) => {\n  const renderDigit = () => {\n    return <p>{digit.value}</p>;\n  };\n\n  return (\n    <button type=\"button\" className={classNames(\"sudoku-digit\", position)}>\n      {renderDigit()}\n    </button>\n  );\n};\n","import React from \"react\";\nimport { SudokuBoardValue } from \"../../../logic/sudoku/types\";\nimport { SudokuDigit } from \"../SudokuDigit/SudokuDigit\";\nimport { SudokuDigitNonEditable } from \"../SudokuDigit/SudokuDigitNonEditable\";\nimport \"./SudokuSquare.scss\";\n\ninterface Props {\n  /** 3x3 array of sudoku values */\n  sudokuValues: SudokuBoardValue[][];\n  onDigitPicked(\n    rowIdx: number,\n    colIdx: number,\n    value: SudokuBoardValue[\"value\"]\n  ): void;\n}\n\nexport const SudokuSquare = ({ sudokuValues, onDigitPicked }: Props) => {\n  const renderDigit = (\n    rowIdx: number,\n    colIdx: number,\n    position: React.ComponentProps<typeof SudokuDigit>[\"position\"]\n  ) => {\n    const value = sudokuValues[rowIdx][colIdx];\n    if (!value.isEditable) {\n      return <SudokuDigitNonEditable digit={value} position={position} />;\n    }\n    return (\n      <SudokuDigit\n        digit={sudokuValues[rowIdx][colIdx]}\n        position={position}\n        onDigitPicked={(v) => onDigitPicked(rowIdx, colIdx, v)}\n      />\n    );\n  };\n  return (\n    <div className=\"sudoku-square\">\n      <div className=\"sudoku-square-row\">\n        {renderDigit(0, 0, \"top-left\")}\n        {renderDigit(0, 1, \"top-middle\")}\n        {renderDigit(0, 2, \"top-right\")}\n      </div>\n      <div className=\"sudoku-square-row\">\n        {renderDigit(1, 0, \"center-left\")}\n        {renderDigit(1, 1, \"center-middle\")}\n        {renderDigit(1, 2, \"center-right\")}\n      </div>\n      <div className=\"sudoku-square-row\">\n        {renderDigit(2, 0, \"bottom-left\")}\n        {renderDigit(2, 1, \"bottom-middle\")}\n        {renderDigit(2, 2, \"bottom-right\")}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSudoku } from \"../../../logic/sudoku/useSudoku\";\nimport { getSquareBySquareIdx } from \"../../../logic/sudoku/utils\";\nimport { SudokuSquare } from \"../SudokuSquare/SudokuSquare\";\nimport \"./Sudoku.scss\";\n\nexport const Sudoku = () => {\n  const { board, updateSquare } = useSudoku();\n\n  const renderSquare = (rowIdx: number, colIdx: number) => {\n    const square = getSquareBySquareIdx(board, rowIdx, colIdx);\n    return (\n      <SudokuSquare\n        sudokuValues={square}\n        onDigitPicked={(rIdx, cIdx, value) =>\n          updateSquare(rowIdx * 3 + rIdx, colIdx * 3 + cIdx, value)\n        }\n      />\n    );\n  };\n  return (\n    <div className=\"sudoku\">\n      <div className=\"sudoku-row\">\n        {renderSquare(0, 0)}\n        {renderSquare(0, 1)}\n        {renderSquare(0, 2)}\n      </div>\n      <div className=\"sudoku-row\">\n        {renderSquare(1, 0)}\n        {renderSquare(1, 1)}\n        {renderSquare(1, 2)}\n      </div>\n      <div className=\"sudoku-row\">\n        {renderSquare(2, 0)}\n        {renderSquare(2, 1)}\n        {renderSquare(2, 2)}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.scss\";\nimport { Actions } from \"./components/board/actions/Actions\";\nimport { Sudoku } from \"./components/board/Sudoku/Sudoku\";\nimport { SudokuProvider } from \"./logic/sudoku/useSudoku\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <SudokuProvider>\n        <Sudoku />\n        <Actions />\n      </SudokuProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}