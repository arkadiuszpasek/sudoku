{"version":3,"sources":["logic/sudoku/types.ts","config/config.ts","logic/sudoku/utils/generating.ts","logic/sudoku/utils/utils.ts","logic/sudoku/utils/validation.ts","logic/sudoku/useSudoku.tsx","components/buttons/Button/Button.tsx","logic/logger.ts","components/inputs/TextInput/TextInput.tsx","components/board/actions/SudokuInput/SudokuInput.tsx","logic/sudoku/utils/parsing.ts","components/board/actions/SudokuResult/SudokuResult.tsx","components/board/actions/Actions.tsx","components/pickers/DigitPicker/DigitPicker.tsx","components/board/SudokuDigit/SudokuDigit.tsx","components/board/SudokuDigit/SudokuDigitNonEditable.tsx","components/board/SudokuSquare/SudokuSquare.tsx","components/board/Sudoku/Sudoku.tsx","App.tsx","index.tsx"],"names":["SudokuValidationResult","config","shiftRowBySquare","row","f","s","t","rest","shiftRowByColumn","generateRows","firstRow","shuffle","range","secondRow","thirdRow","fourthRow","fifthRow","sixthRow","seventhRow","eighthRow","ninthRow","flatten","map","value","isEditable","generateSudoku","rows","val","i","rowIdx","random","colIdx","hideValues","getSquareBySquareIdx","board","squareRowIdx","squareColIdx","slice","collidesIn","sudokuValue","arr","filter","el","length","validateSudoku","validatedBoard","digitRow","digitRowIdx","digitValue","digitValueIdx","hasError","column","idx","getColumn","square","digitColIdx","Math","floor","getSquare","hasRowCollision","hasColumnCollision","hasSquareCollision","anyHasError","find","result","Incorrect","Correct","SudokuContext","React","createContext","undefined","SudokuProvider","children","sudoku","useState","setBoard","setResult","updateSquare","digitR","digitRIdx","digitIdx","reset","validate","validation","useSudokuBoard","Provider","useSudoku","useContext","Error","Button","variant","className","classNames","logger","console","log","info","warn","error","TextInput","onChange","placeholder","e","target","SudokuInput","isInteracting","setIsInteracting","setValue","onClick","json","JSON","parse","replace","Array","parseJsonStringToBoard","Icon","SudokuResult","Actions","DigitPicker","onPicked","renderDigit","digit","SudokuDigit","position","onDigitPicked","isPicking","setIsPicking","handlePicked","type","onBlur","onFocus","Grow","in","timeout","SudokuDigitNonEditable","SudokuSquare","sudokuValues","v","Sudoku","renderSquare","rIdx","cIdx","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c525707a.chunk.js","sourcesContent":["export type SudokuBoardValue = {\r\n  value: number | null;\r\n  hasError?: boolean;\r\n  isEditable: boolean;\r\n};\r\nexport type SudokuBoard = SudokuBoardValue[][];\r\nexport enum SudokuValidationResult {\r\n  Incorrect = \"Incorrect\",\r\n  Correct = \"Correct\",\r\n}\r\n\r\nexport interface ValidationResult {\r\n  board: SudokuBoard;\r\n  result: SudokuValidationResult;\r\n}\r\n\r\nexport interface SudokuHook {\r\n  board: SudokuBoard;\r\n  setBoard(board: SudokuBoard): void;\r\n  result?: SudokuValidationResult;\r\n  reset(): void;\r\n  validate(): void;\r\n  updateSquare(\r\n    digitRowIdx: number,\r\n    digitColIdx: number,\r\n    value: SudokuBoardValue[\"value\"]\r\n  ): void;\r\n}\r\n","export const config = {\r\n  sudokuHideDigits: 50,\r\n};\r\n","import { flatten, random, range, shuffle } from \"lodash\";\r\nimport { config } from \"../../../config/config\";\r\nimport { SudokuBoard, SudokuBoardValue } from \"../types\";\r\n\r\nconst shiftRowBySquare = (row: number[]): number[] => {\r\n  const [f, s, t, ...rest] = row;\r\n  return [...rest, f, s, t];\r\n};\r\n\r\nconst shiftRowByColumn = (row: number[]): number[] => {\r\n  const [f, ...rest] = row;\r\n  return [...rest, f];\r\n};\r\n\r\nconst hideValues = (rows: SudokuBoardValue[][]): SudokuBoardValue[][] => {\r\n  const value = rows.map((row) => [\r\n    ...row.map((val) => ({ value: val.value, isEditable: false })),\r\n  ]);\r\n  for (let i = 0; i < config.sudokuHideDigits; i += 1) {\r\n    const rowIdx = random(0, 8);\r\n    const colIdx = random(0, 8);\r\n\r\n    value[rowIdx][colIdx] = { value: null, isEditable: true };\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nexport const generateRows = (): SudokuBoardValue[][] => {\r\n  const firstRow = shuffle(range(1, 10));\r\n  const secondRow = shiftRowBySquare(firstRow);\r\n  const thirdRow = shiftRowBySquare(secondRow);\r\n\r\n  const fourthRow = shiftRowByColumn(thirdRow);\r\n  const fifthRow = shiftRowBySquare(fourthRow);\r\n  const sixthRow = shiftRowBySquare(fifthRow);\r\n\r\n  const seventhRow = shiftRowByColumn(sixthRow);\r\n  const eighthRow = shiftRowBySquare(seventhRow);\r\n  const ninthRow = shiftRowBySquare(eighthRow);\r\n\r\n  return flatten(\r\n    shuffle([\r\n      [firstRow, secondRow, thirdRow],\r\n      [fourthRow, fifthRow, sixthRow],\r\n      [seventhRow, eighthRow, ninthRow],\r\n    ])\r\n  ).map((row) => row.map((value) => ({ value, isEditable: true })));\r\n};\r\n\r\nexport const generateSudokuSolved = (): SudokuBoard => {\r\n  return generateRows();\r\n};\r\n\r\nexport const generateSudoku = (): SudokuBoard => {\r\n  const rows = generateRows();\r\n\r\n  return hideValues(rows);\r\n};","import {\r\n  SudokuBoard,\r\n  SudokuBoardValue\r\n} from \"../types\";\r\n\r\nexport const getColumn = (board: SudokuBoard, idx: number): SudokuBoardValue[] => {\r\n  return board.map((row) => row[idx]);\r\n};\r\n\r\nexport const getSquareBySquareIdx = (\r\n  board: SudokuBoard,\r\n  squareRowIdx: number,\r\n  squareColIdx: number\r\n): SudokuBoardValue[][] => {\r\n  const rows = board.slice(squareRowIdx * 3, squareRowIdx * 3 + 3);\r\n  return rows.map((row) => row.slice(squareColIdx * 3, squareColIdx * 3 + 3));\r\n};\r\n\r\nexport const getSquare = (\r\n  board: SudokuBoard,\r\n  digitRowIdx: number,\r\n  digitColIdx: number\r\n): SudokuBoardValue[][] => {\r\n  const squareRowIdx = Math.floor(digitRowIdx / 3);\r\n  const squareColIdx = Math.floor(digitColIdx / 3);\r\n\r\n  return getSquareBySquareIdx(board, squareRowIdx, squareColIdx);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import { flatten } from \"lodash\";\r\nimport { SudokuBoard, SudokuBoardValue, SudokuValidationResult, ValidationResult } from \"../types\";\r\nimport { getColumn, getSquare } from \"./utils\";\r\n\r\nconst collidesIn = (\r\n  sudokuValue: SudokuBoardValue,\r\n  arr: SudokuBoardValue[]\r\n): boolean => {\r\n  if (!sudokuValue.value) {\r\n    return true;\r\n  }\r\n\r\n  return arr.filter((el) => el.value === sudokuValue.value).length !== 1;\r\n};\r\n\r\nexport const validateSudoku = (board: SudokuBoard): ValidationResult => {\r\n  const validatedBoard = board.map((digitRow, digitRowIdx) => {\r\n    return digitRow.map((digitValue, digitValueIdx) => {\r\n      if (!digitValue.isEditable) {\r\n        return digitValue;\r\n      }\r\n      if (!digitValue.value) {\r\n        return { ...digitValue, hasError: true };\r\n      }\r\n      const column = getColumn(board, digitValueIdx);\r\n      const square = flatten(getSquare(board, digitRowIdx, digitValueIdx));\r\n\r\n      const hasRowCollision = collidesIn(digitValue, digitRow);\r\n      const hasColumnCollision = collidesIn(digitValue, column);\r\n      const hasSquareCollision = collidesIn(digitValue, square);\r\n\r\n      return {\r\n        ...digitValue,\r\n        hasError: hasSquareCollision || hasRowCollision || hasColumnCollision,\r\n      };\r\n    });\r\n  });\r\n\r\n  const anyHasError = validatedBoard.find((row) =>\r\n    row.find((el) => el.hasError)\r\n  );\r\n\r\n  return {\r\n    board: validatedBoard,\r\n    result: anyHasError\r\n      ? SudokuValidationResult.Incorrect\r\n      : SudokuValidationResult.Correct,\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  SudokuBoard,\r\n  SudokuBoardValue,\r\n  SudokuHook,\r\n  SudokuValidationResult,\r\n} from \"./types\";\r\nimport { generateSudoku } from \"./utils/generating\";\r\nimport { validateSudoku } from \"./utils/validation\";\r\n\r\nconst useSudokuBoard = (): SudokuHook => {\r\n  const [board, setBoard] = useState<SudokuBoard>(generateSudoku());\r\n  const [result, setResult] = useState<SudokuValidationResult>();\r\n\r\n  const updateSquare = (\r\n    digitRowIdx: number,\r\n    digitColIdx: number,\r\n    value: SudokuBoardValue[\"value\"]\r\n  ) => {\r\n    setBoard(\r\n      board.map((digitR, digitRIdx) => {\r\n        if (digitRIdx !== digitRowIdx) {\r\n          return digitR;\r\n        }\r\n\r\n        return digitR.map((digitValue, digitIdx) => {\r\n          if (digitIdx !== digitColIdx) {\r\n            return digitValue;\r\n          }\r\n\r\n          return { ...digitValue, value };\r\n        });\r\n      })\r\n    );\r\n  };\r\n\r\n  const reset = () => {\r\n    setBoard(generateSudoku());\r\n    setResult(undefined);\r\n  };\r\n\r\n  const validate = () => {\r\n    const validation = validateSudoku(board);\r\n    setBoard(validation.board);\r\n    setResult(validation.result);\r\n  };\r\n\r\n  return {\r\n    board,\r\n    setBoard,\r\n    updateSquare,\r\n    reset,\r\n    validate,\r\n    result,\r\n  };\r\n};\r\n\r\nconst SudokuContext = React.createContext<SudokuHook | undefined>(undefined);\r\nexport const SudokuProvider = ({\r\n  children,\r\n}: React.PropsWithChildren<unknown>) => {\r\n  const sudoku = useSudokuBoard();\r\n\r\n  return (\r\n    <SudokuContext.Provider value={sudoku}>{children}</SudokuContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSudoku = (): SudokuHook => {\r\n  const sudoku = React.useContext(SudokuContext);\r\n\r\n  if (!sudoku) {\r\n    throw new Error(\"useSudoku must be used within SudokuProvider\");\r\n  }\r\n\r\n  return sudoku;\r\n};\r\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport \"./Button.scss\";\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  variant: Variant;\n}\nexport const Button = ({ variant, children, ...rest }: Props) => {\n  return (\n    <div className={classNames(\"button\", variant)} {...rest}>\n      {children}\n    </div>\n  );\n};\n\ntype Variant = \"button-normal\" | \"button-outlined\";\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable no-console */\r\n\r\nexport interface Logger {\r\n  log(...value: any[]): void;\r\n  info(...value: any[]): void;\r\n  warn(...value: any[]): void;\r\n  error(...value: any[]): void;\r\n}\r\nclass ConsoleLogger {\r\n  log(...value: any[]): void {\r\n    console.log(...value);\r\n  }\r\n\r\n  info(...value: any[]): void {\r\n    console.info(...value);\r\n  }\r\n\r\n  warn(...value: any[]): void {\r\n    console.warn(...value);\r\n  }\r\n\r\n  error(...value: any[]): void {\r\n    console.error(...value);\r\n  }\r\n}\r\n\r\nexport const logger = new ConsoleLogger() as Logger;\r\n","import classNames from \"classnames\";\r\nimport React from \"react\";\r\nimport \"./TextInput.scss\";\r\n\r\ninterface Props extends Omit<React.HTMLProps<HTMLInputElement>, \"onChange\"> {\r\n  onChange(value: string): void;\r\n}\r\n\r\nexport const TextInput = ({\r\n  value,\r\n  onChange,\r\n  placeholder,\r\n  className,\r\n}: Props) => {\r\n  return (\r\n    <input\r\n      className={classNames(\"text-input\", className)}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      value={value}\r\n      placeholder={placeholder}\r\n    />\r\n  );\r\n};\r\n","import { Icon } from \"@material-ui/core\";\r\nimport classNames from \"classnames\";\r\nimport React, { useState } from \"react\";\r\nimport { useSudoku } from \"../../../../logic/sudoku/useSudoku\";\r\nimport { parseJsonStringToBoard } from \"../../../../logic/sudoku/utils/parsing\";\r\nimport { Button } from \"../../../buttons/Button/Button\";\r\nimport { TextInput } from \"../../../inputs/TextInput/TextInput\";\r\nimport \"./SudokuInput.scss\";\r\n\r\nexport const SudokuInput = () => {\r\n  const { setBoard } = useSudoku();\r\n  const [isInteracting, setIsInteracting] = useState(false);\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const reset = () => {\r\n    setValue(\"\");\r\n    setIsInteracting(false);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const board = parseJsonStringToBoard(value);\r\n    if (board) {\r\n      setBoard(board);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sudoku-input\">\r\n      <Button\r\n        variant=\"button-outlined\"\r\n        onClick={() => setIsInteracting(!isInteracting)}\r\n      >\r\n        Start a custom game\r\n      </Button>\r\n      <div\r\n        className={classNames(\"sudoku-input-area\", {\r\n          \"sudoku-input-area-active\": isInteracting,\r\n        })}\r\n      >\r\n        <TextInput\r\n          value={value}\r\n          onChange={setValue}\r\n          placeholder={`\"[1,null,5,..],[3,...],...]\"`}\r\n        />\r\n        <i onClick={handleSubmit}>\r\n          <Icon>done</Icon>\r\n        </i>\r\n        <i onClick={reset}>\r\n          <Icon>close</Icon>\r\n        </i>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { logger } from \"../../logger\";\r\nimport { SudokuBoard } from \"../types\";\r\n\r\nexport const parseJsonStringToBoard = (\r\n  json: string\r\n): SudokuBoard | undefined => {\r\n  try {\r\n    const arr = JSON.parse(json.replace(/[\\s\"]/g, \"\")) as (number | null)[][];\r\n    if (!(arr instanceof Array) || !(arr[0] instanceof Array)) {\r\n      logger.warn(\"Received input is not a correct array\", arr, json);\r\n\r\n      return undefined;\r\n    }\r\n\r\n    if (arr.length !== 9 || !!arr.find((row) => row.length !== 9)) {\r\n      logger.warn(\"Received input array is not of correct shape\", arr, json);\r\n\r\n      return undefined;\r\n    }\r\n\r\n    if (\r\n      arr.find((row) =>\r\n        row.find((el) => {\r\n          return el && typeof el !== \"number\";\r\n        })\r\n      )\r\n    ) {\r\n      logger.warn(\"Received input has illegal values\", arr, json);\r\n\r\n      return undefined;\r\n    }\r\n\r\n    return arr.map((row) =>\r\n      row.map((el) => ({\r\n        value: el,\r\n        isEditable: !el,\r\n      }))\r\n    );\r\n  } catch (e) {\r\n    logger.warn(\"Couldn't parse input to sudoku board\", e, json);\r\n\r\n    return undefined;\r\n  }\r\n};","import classNames from \"classnames\";\r\nimport React from \"react\";\r\nimport { SudokuValidationResult } from \"../../../../logic/sudoku/types\";\r\nimport \"./SudokuResult.scss\";\r\n\r\ninterface Props {\r\n  result?: SudokuValidationResult;\r\n}\r\nexport const SudokuResult = ({ result }: Props) => {\r\n  const renderText = () => {\r\n    return result === SudokuValidationResult.Correct ? (\r\n      <p>{\"Leapin' lizards! Sudoku is correct\"}</p>\r\n    ) : (\r\n      <p>{\"Son of a biscuit! Something's wrong\"}</p>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classNames(\"sudoku-result\", {\r\n        \"sudoku-result-showing\": result !== undefined,\r\n        \"sudoku-result-danger\": result === SudokuValidationResult.Incorrect,\r\n        \"sudoku-result-success\": result === SudokuValidationResult.Correct,\r\n      })}\r\n    >\r\n      {result && renderText()}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { useSudoku } from \"../../../logic/sudoku/useSudoku\";\nimport { Button } from \"../../buttons/Button/Button\";\nimport \"./Actions.scss\";\nimport { SudokuInput } from \"./SudokuInput/SudokuInput\";\nimport { SudokuResult } from \"./SudokuResult/SudokuResult\";\n\nexport const Actions = () => {\n  const { reset, validate, result } = useSudoku();\n  return (\n    <div className=\"actions\">\n      <SudokuInput />\n      <div className=\"actions-buttons\">\n        <Button variant=\"button-normal\" onClick={reset}>\n          New game\n        </Button>\n        <Button variant=\"button-outlined\" onClick={validate}>\n          Check solution\n        </Button>\n      </div>\n      <SudokuResult result={result} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./DigitPicker.scss\";\n\ninterface Props {\n  onPicked(digit: number | null): void;\n}\nexport const DigitPicker = ({ onPicked }: Props) => {\n  const renderDigit = (digit: number) => {\n    const handlePicked = () => {\n      onPicked(digit);\n    };\n    return (\n      <div className=\"digit-picker-btn\" onClick={handlePicked}>\n        {digit}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"digit-picker\">\n      <div className=\"digit-picker-row\">\n        {renderDigit(1)}\n        {renderDigit(2)}\n        {renderDigit(3)}\n      </div>\n      <div className=\"digit-picker-row\">\n        {renderDigit(4)}\n        {renderDigit(5)}\n        {renderDigit(6)}\n      </div>\n      <div className=\"digit-picker-row\">\n        {renderDigit(7)}\n        {renderDigit(8)}\n        {renderDigit(9)}\n      </div>\n      <div className=\"digit-picker-clear-btn\" onClick={() => onPicked(null)}>\n        Clear\n      </div>\n    </div>\n  );\n};\n","import { Grow } from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React, { useState } from \"react\";\nimport { SudokuBoardValue } from \"../../../logic/sudoku/types\";\nimport { DigitPicker } from \"../../pickers/DigitPicker/DigitPicker\";\nimport \"./SudokuDigit.scss\";\n\ninterface Props {\n  digit: SudokuBoardValue;\n  position: Position;\n  onDigitPicked(value: SudokuBoardValue[\"value\"]): void;\n}\n\nexport const SudokuDigit = ({ digit, position, onDigitPicked }: Props) => {\n  const [isPicking, setIsPicking] = useState<boolean>();\n  const handlePicked = (value: number | null) => {\n    setIsPicking(undefined);\n    onDigitPicked(value);\n  };\n  const renderPicker = () => {\n    return (\n      <Grow in timeout={250}>\n        <div className=\"sudoku-digit-picker\">\n          <DigitPicker onPicked={handlePicked} />\n        </div>\n      </Grow>\n    );\n  };\n\n  const renderDigit = () => {\n    return <p>{digit.value}</p>;\n  };\n\n  return (\n    <button\n      type=\"button\"\n      onBlur={() => setIsPicking(false)}\n      onFocus={() => setIsPicking(true)}\n      onClick={isPicking === undefined ? () => setIsPicking(true) : undefined}\n      className={classNames(\"sudoku-digit\", \"sudoku-digit-editable\", position, {\n        \"sudoku-digit-error\": digit.hasError,\n      })}\n    >\n      {isPicking && renderPicker()}\n      {renderDigit()}\n    </button>\n  );\n};\n\nexport type Position =\n  | \"top-left\"\n  | \"top-middle\"\n  | \"top-right\"\n  | \"center-left\"\n  | \"center-middle\"\n  | \"center-right\"\n  | \"bottom-left\"\n  | \"bottom-middle\"\n  | \"bottom-right\";\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport { SudokuBoardValue } from \"../../../logic/sudoku/types\";\nimport { Position } from \"./SudokuDigit\";\nimport \"./SudokuDigit.scss\";\n\ninterface Props {\n  digit: SudokuBoardValue;\n  position: Position;\n}\n\nexport const SudokuDigitNonEditable = ({ digit, position }: Props) => {\n  const renderDigit = () => {\n    return <p>{digit.value}</p>;\n  };\n\n  return (\n    <button type=\"button\" className={classNames(\"sudoku-digit\", position)}>\n      {renderDigit()}\n    </button>\n  );\n};\n","import React from \"react\";\nimport { SudokuBoardValue } from \"../../../logic/sudoku/types\";\nimport { SudokuDigit } from \"../SudokuDigit/SudokuDigit\";\nimport { SudokuDigitNonEditable } from \"../SudokuDigit/SudokuDigitNonEditable\";\nimport \"./SudokuSquare.scss\";\n\ninterface Props {\n  /** 3x3 array of sudoku values */\n  sudokuValues: SudokuBoardValue[][];\n  onDigitPicked(\n    rowIdx: number,\n    colIdx: number,\n    value: SudokuBoardValue[\"value\"]\n  ): void;\n}\n\nexport const SudokuSquare = ({ sudokuValues, onDigitPicked }: Props) => {\n  const renderDigit = (\n    rowIdx: number,\n    colIdx: number,\n    position: React.ComponentProps<typeof SudokuDigit>[\"position\"]\n  ) => {\n    const value = sudokuValues[rowIdx][colIdx];\n    if (!value.isEditable) {\n      return <SudokuDigitNonEditable digit={value} position={position} />;\n    }\n    return (\n      <SudokuDigit\n        digit={sudokuValues[rowIdx][colIdx]}\n        position={position}\n        onDigitPicked={(v) => onDigitPicked(rowIdx, colIdx, v)}\n      />\n    );\n  };\n  return (\n    <div className=\"sudoku-square\">\n      <div className=\"sudoku-square-row\">\n        {renderDigit(0, 0, \"top-left\")}\n        {renderDigit(0, 1, \"top-middle\")}\n        {renderDigit(0, 2, \"top-right\")}\n      </div>\n      <div className=\"sudoku-square-row\">\n        {renderDigit(1, 0, \"center-left\")}\n        {renderDigit(1, 1, \"center-middle\")}\n        {renderDigit(1, 2, \"center-right\")}\n      </div>\n      <div className=\"sudoku-square-row\">\n        {renderDigit(2, 0, \"bottom-left\")}\n        {renderDigit(2, 1, \"bottom-middle\")}\n        {renderDigit(2, 2, \"bottom-right\")}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\r\nimport { useSudoku } from \"../../../logic/sudoku/useSudoku\";\r\nimport { getSquareBySquareIdx } from \"../../../logic/sudoku/utils/utils\";\r\nimport { SudokuSquare } from \"../SudokuSquare/SudokuSquare\";\r\nimport \"./Sudoku.scss\";\r\n\r\nexport const Sudoku = () => {\r\n  const { board, updateSquare } = useSudoku();\r\n\r\n  const renderSquare = (rowIdx: number, colIdx: number) => {\r\n    const square = getSquareBySquareIdx(board, rowIdx, colIdx);\r\n    return (\r\n      <SudokuSquare\r\n        sudokuValues={square}\r\n        onDigitPicked={(rIdx, cIdx, value) =>\r\n          updateSquare(rowIdx * 3 + rIdx, colIdx * 3 + cIdx, value)\r\n        }\r\n      />\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"sudoku\">\r\n      <div className=\"sudoku-row\">\r\n        {renderSquare(0, 0)}\r\n        {renderSquare(0, 1)}\r\n        {renderSquare(0, 2)}\r\n      </div>\r\n      <div className=\"sudoku-row\">\r\n        {renderSquare(1, 0)}\r\n        {renderSquare(1, 1)}\r\n        {renderSquare(1, 2)}\r\n      </div>\r\n      <div className=\"sudoku-row\">\r\n        {renderSquare(2, 0)}\r\n        {renderSquare(2, 1)}\r\n        {renderSquare(2, 2)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport { Actions } from \"./components/board/actions/Actions\";\nimport { Sudoku } from \"./components/board/Sudoku/Sudoku\";\nimport { SudokuProvider } from \"./logic/sudoku/useSudoku\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <SudokuProvider>\n        <Sudoku />\n        <Actions />\n      </SudokuProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}